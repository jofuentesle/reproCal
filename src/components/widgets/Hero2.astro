---
import Button from '~/components/ui/Button.astro';
import type { Hero as Props } from '~/types';
import Gallery from '~/components/widgets/Gallery.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  galleryImages = await Astro.slots.render('galleryImage'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
      <div class="py-12 md:py-20 lg:py-0 lg:flex lg:items-center lg:h-screen lg:gap-8">
        <div class="container flex flex-col lg:flex-row">
           <!-- Sección de texto -->
          <div class="basis-full lg:basis-1/2 text-center lg:text-left pb-10 md:pb-16 mx-auto">
          {
            tagline && (
              <p
                class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl mx-auto lg:max-w-none">
            {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}

            {
              actions && (
                <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl">
                  {Array.isArray(actions) ? (
                    actions.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )}
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
          </div>

          <!-- Sección de galería -->
          <div class="gallery-container basis-full lg:basis-1/2">
            {galleryImages.length > 0 && <Gallery images={galleryImages} />} 
          </div>
        </div>
    </div>
  </div>
</section>

<style>
 /* .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .gallery-container {
    padding: 20px;
    width: 100%;
  }
  .flex {
    display: flex;
  }
  .text-container {
    padding: 20px;
  }
  .gallery-container {
    padding: 20px;
  }
  @media (min-width: 768px) {
    .container {
      flex-direction: row;
    }
  }*/
  .container {
    display: flex;
  flex-direction: column; /* Comportamiento por defecto en pantallas pequeñas */
  align-items: center;
  justify-content: center;
  width: 100%;
  }

  .gallery-container {
    padding: 20px;
    width: 100%;
  }

  /* Para pantallas grandes, dividir en dos columnas */
@media (min-width: 1024px) {
  .container {
    flex-direction: row; /* Cambia la dirección a fila en pantallas grandes */
  }

  .text-container {
    width: 50%; /* Texto ocupa la mitad izquierda */
  }

  .gallery-container {
    width: 50%; /* Galería ocupa la mitad derecha */
  }
}

/* Para pantallas pequeñas (apilar verticalmente) */
@media (max-width: 1024px) {
  .container {
    flex-direction: column; /* Apilar verticalmente en pantallas pequeñas */
  }

  .gallery-container {
    padding-top: 0;
  }
}
</style>